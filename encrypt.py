import numpy as np

s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

def split_4bits(i: np.uint8) -> tuple[np.uint8, np.uint8]:
    high = i >> 4
    low = i - high << 4
    return high, low

def merge_4bits(high: np.uint8, low: np.uint8) -> np.uint8:
    return high << 4 + low

def F(subPT: np.ndarray, subMK: np.ndarray) -> np.ndarray:
    for k in range(3):
        subPT[k] = s_box[subPT[k] ^ subMK[k]]
    x_high, x_low = split_4bits(subPT[3])
    k_high, k_low = split_4bits(subMK[3])
    t1 = (x_low * k_high) % 16
    t2 = t1 ^ x_high
    t3 = (x_low + k_low) % 16
    subPT[3] = merge_4bits(t3, t2)
    return subPT

def rotate(row: list, n: int) -> list:
    return row[n:] + row[:n]

def mat_idx(row_id: int, col_id: int) -> int:
        return 4 * col_id + row_id

def ShiftRow(PT: np.ndarray) -> np.ndarray:
    for row_id in range(4):
        if row_id == 0:
            continue
        row = [PT[mat_idx(row_id, col_id)] for col_id in range(4)]
        row = rotate(row, row_id)
        for col_id in range(4):
            PT[mat_idx(row_id, col_id)] = row[col_id]
    return PT

# borrowed from https://github.com/boppreh/aes
# learned from http://cs.ucsb.edu/~koc/cs178/projects/JT/aes.c
xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)


def mix_single_column(a: list) -> list:
    # see Sec 4.1.2 in The Design of Rijndael
    t = a[0] ^ a[1] ^ a[2] ^ a[3]
    u = a[0]
    a[0] ^= t ^ xtime(a[0] ^ a[1])
    a[1] ^= t ^ xtime(a[1] ^ a[2])
    a[2] ^= t ^ xtime(a[2] ^ a[3])
    a[3] ^= t ^ xtime(a[3] ^ u)
    return a
# end borrowed

def MixColumn(PT: np.ndarray) -> np.ndarray:
    for col_id in range(4):
        col = mix_single_column([PT[mat_idx(row_id, col_id)] for row_id in range(4)])
        for row_id in range(4):
            PT[mat_idx(row_id, col_id)] = col[row_id]
    return PT


def encrypt(PT: np.ndarray, MK: np.ndarray) -> np.ndarray:
    """
    Encrypt 16byte plaintext into 16byte ciphertext using 16byte masterkey
    """
    CT = np.zeros_like(PT)
    for i in range(4):
        for j in range(4):
            loc = slice(4 * j, 4 * j + 4)
            PT[loc] = F(PT[loc], MK[loc])
        PT[:] = ShiftRow(PT)
        PT[:] = MixColumn(PT)
    CT[:] = PT
    return CT


testPT = "29622772780EF40273BAE889B7D5F579"
testCT = "DDCDC6ECE7ED425E2651145BA7AF74AD"

def parse_str(text: str) -> np.ndarray:
    assert len(text) == 16 * 2
    text_hex = []
    for i in range(16):
        text_hex.append(int(text[2 * i: 2 * (i + 1)], base=16))
    return np.array(text_hex, dtype=np.uint8)


def to_str(byte_array: np.ndarray) -> str:
    return ''.join(map(lambda i: f"{i:02X}", byte_array))

def main():
    PT = parse_str(testPT)
    MK = np.random.randint(0, 256, 16, dtype=np.uint8)
    CT_exp = encrypt(PT, MK)
    print("exp", to_str(CT_exp))
    CT_ans = parse_str(testCT)
    print("ans", to_str(CT_ans))


if __name__=="__main__":
    main()
